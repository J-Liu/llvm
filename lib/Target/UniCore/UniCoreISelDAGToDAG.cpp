//==-- UniCoreISelDAGToDAG.cpp - A dag to dag inst selector for UniCore --==//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the UniCore target.
//
//===----------------------------------------------------------------------===//

#include "UniCore.h"
#include "UniCoreTargetMachine.h"
#include "UniCoreISelLowering.h"
#include "llvm/DerivedTypes.h"
#include "llvm/Function.h"
#include "llvm/Intrinsics.h"
#include "llvm/CallingConv.h"
#include "llvm/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Target/TargetLowering.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

/// UniCoreDAGToDAGISel - UniCore specific code to select UniCore machine
/// instructions for SelectionDAG operations.
///
namespace {
  class UniCoreDAGToDAGISel : public SelectionDAGISel {
    const UniCoreTargetLowering &Lowering;
    //const UniCoreSubtarget &Subtarget;

  public:
    UniCoreDAGToDAGISel(UniCoreTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel),
        Lowering(*TM.getTargetLowering())
    {}

    virtual const char *getPassName() const {
      return "UniCore DAG->DAG Pattern Instruction Selection";
    }

    /// getI16Imm - Return a target constant with the specified value, of type
    /// i16.
    inline SDValue getI16Imm(uint64_t Imm) {
      return CurDAG->getTargetConstant(Imm, MVT::i16);
    }

    /// getI32Imm - Return a target constant with the specified value, of type
    /// i32.
    inline SDValue getI32Imm(uint64_t Imm) {
      return CurDAG->getTargetConstant(Imm, MVT::i32);
    }
    
    // Include the pieces autogenerated from the target description.
    #include "UniCoreGenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);
  };
}  // end anonymous namespace

/// createUniCoreISelDag - This pass converts a legalized DAG into a
/// UniCore-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createUniCoreISelDag(UniCoreTargetMachine &TM,
                                          CodeGenOpt::Level OptLevel) {
  return new UniCoreDAGToDAGISel(TM, OptLevel);
}

SDNode *UniCoreDAGToDAGISel::Select(SDNode *Node) {
  DebugLoc dl = Node->getDebugLoc();

  // Dump information about the Node being selected
  DEBUG(errs() << "Selecting: ");
  DEBUG(Node->dump(CurDAG));
  DEBUG(errs() << "\n");

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    DEBUG(errs() << "== ";
          Node->dump(CurDAG);
          errs() << "\n");
    return NULL;
  }

  // Select the default instruction
  SDNode *ResNode = SelectCode(Node);

  DEBUG(errs() << "=> ");
  if (ResNode == NULL || ResNode == Node)
    DEBUG(Node->dump(CurDAG));
  else
    DEBUG(ResNode->dump(CurDAG));
  DEBUG(errs() << "\n");

  return ResNode;
}
